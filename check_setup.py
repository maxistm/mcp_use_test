#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–ó–∞–ø—É—Å–∫: python check_setup.py
"""

import sys
import subprocess
from pathlib import Path


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python."""
    print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version >= (3, 12):
        print(f"  ‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print(f"  ‚ùå Python {version.major}.{version.minor} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.12+)")
        return False


def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        import telebot
        print("  ‚úÖ pyTelegramBotAPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("  ‚ùå pyTelegramBotAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        import openai
        print("  ‚úÖ openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("  ‚ùå openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        import mcp
        print("  ‚úÖ mcp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("  ‚ùå mcp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        import bot
        print("  ‚úÖ bot.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"  ‚ùå bot.py –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏: {e}")
        return False

    try:
        import mcp_client
        print("  ‚úÖ mcp_client.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"  ‚ùå mcp_client.py –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏: {e}")
        return False

    return True


def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_file = Path("config.json")
    
    if not config_file.exists():
        print(f"  ‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("     –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config.json.example -> config.json")
        return False
    
    try:
        import json
        with open(config_file) as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if "telegram" not in config or "token" not in config["telegram"]:
            print("  ‚ùå telegram.token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.json")
            return False
        
        token = config["telegram"]["token"]
        if token.startswith("YOUR_"):
            print("  ‚ùå telegram.token —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder")
            return False
        
        print("  ‚úÖ config.json –≤–∞–ª–∏–¥–µ–Ω")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ config.json: {e}")
        return False


def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker."""
    print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...")
    try:
        result = subprocess.run(["docker", "ps"], capture_output=True, timeout=5)
        if result.returncode == 0:
            print("  ‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –æ–±—Ä–∞–∑–∞
            result = subprocess.run(
                ["docker", "images", "--format", "{{.Repository}}"],
                capture_output=True,
                timeout=5,
                text=True
            )
            if "mcp/fetch" in result.stdout:
                print("  ‚úÖ mcp/fetch –æ–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return True
            else:
                print("  ‚ö†Ô∏è  mcp/fetch –æ–±—Ä–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                print("     –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker pull mcp/fetch")
                return False
        else:
            print("  ‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except FileNotFoundError:
        print("  ‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except subprocess.TimeoutExpired:
        print("  ‚ö†Ô∏è  Docker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    required_files = [
        "main.py",
        "bot.py",
        "mcp_client.py",
        "pyproject.toml",
        ".python-version",
    ]
    
    for file in required_files:
        if Path(file).exists():
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("\n" + "=" * 50)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP-CB")
    print("=" * 50 + "\n")
    
    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", check_files),
        ("–ò–º–ø–æ—Ä—Ç—ã", check_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config),
        ("Docker", check_docker),
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
            print()
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}\n")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    all_ok = True
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
        if not result:
            all_ok = False
    
    print("=" * 50)
    
    if all_ok:
        print("\n‚ú® –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–í—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("  python main.py")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("–°–º–æ—Ç—Ä–∏—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
        print("\nüìñ –ü–æ–º–æ—â—å: https://github.com/maxistm/mcp_use_test#readme")
        return 1


if __name__ == "__main__":
    sys.exit(main())